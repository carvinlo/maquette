{"version":3,"sources":["maquette.js","../../../../src/maquette.ts"],"names":["Object","defineProperty","exports","value","createDom","updateDom","NAMESPACE_SVG","NAMESPACE_W3","emptyArray","extend","base","overrides","result","keys","forEach","key","same","vnode1","vnode2","vnodeSelector","properties","bind","toTextVNode","data","undefined","children","text","toString","domNode","appendChildren","parentSelector","insertions","main","i","length_1","length","item","Array","isArray","push","missingTransition","Error","DEFAULT_PROJECTION_OPTIONS","namespace","eventHandlerInterceptor","styleApplyer","styleName","style","transitions","enter","exit","applyDefaultProjectionOptions","projectorOptions","checkStyleValue","styleValue","setProperties","projectionOptions","propNames","propCount","propName","propValue","split","token","classList","add","classNames","classNameCount","j","className","styleNames","styleCount","type","lastIndexOf","oldPropValue","evt","apply","this","target","setAttributeNS","setAttribute","_loop_1","updateProperties","previousProperties","propertiesUpdated","previousValue","on","remove","newStyleValue","domValue","removeAttribute","findIndexOfChild","sameAs","start","nodeAdded","vNode","enterAnimation","nodeToRemove","exitAnimation","pointerEvents","removeDomNode","parentNode","removeChild","checkDistinguishable","childNodes","indexToCheck","parentVNode","operation","childNode","node","updateChildren","vnode","oldChildren","newChildren","oldChildrenLength","newChildrenLength","oldIndex","newIndex","textUpdated","oldChild","newChild","findOldIndex","addChildren","initPropertiesAndChildren","textContent","afterCreate","insertBefore","c","found","doc","ownerDocument","createTextNode","appendChild","charAt","slice","id","createElementNS","createElement","previous","updated","newVNode","replaceChild","firstChild","afterUpdate","updateAnimation","createProjection","update","updatedVnode","h","selector","flattenedChildren","dom","create","document","append","beforeNode","merge","element","replace","createCache","cachedInputs","cachedOutcome","invalidate","inputs","calculation","createMapping","getSourceKey","createResult","updateResult","results","map","newSources","newKeys","oldTargets","source","sourceKey","searchIndex","createProjector","projector","propertyName","eventHandler","scheduleRender","arguments","scheduled","renderCompleted","stopped","projections","renderFunctions","doRender","renderNow","requestAnimationFrame","stop","cancelAnimationFrame","resume","renderMaquetteFunction","detach","splice"],"mappings":"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","file":"maquette.min.js","sourcesContent":["(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['exports'], factory);\n    } else if (typeof exports === 'object' && typeof exports.nodeName !== 'string') {\n        // CommonJS\n        factory(exports);\n    } else {\n        // Browser globals\n        factory(root.maquette = {});\n    }\n}(this, function (exports) {\n    'use strict';\n    // Comment that is displayed in the API documentation for the maquette module:\n    /**\n * Welcome to the API documentation of the **maquette** library.\n *\n * [[http://maquettejs.org/|To the maquette homepage]]\n */\n    Object.defineProperty(exports, '__esModule', { value: true });\n    var NAMESPACE_W3 = 'http://www.w3.org/';\n    var NAMESPACE_SVG = NAMESPACE_W3 + '2000/svg';\n    var NAMESPACE_XLINK = NAMESPACE_W3 + '1999/xlink';\n    // Utilities\n    var emptyArray = [];\n    var extend = function (base, overrides) {\n        var result = {};\n        Object.keys(base).forEach(function (key) {\n            result[key] = base[key];\n        });\n        if (overrides) {\n            Object.keys(overrides).forEach(function (key) {\n                result[key] = overrides[key];\n            });\n        }\n        return result;\n    };\n    // Hyperscript helper functions\n    var same = function (vnode1, vnode2) {\n        if (vnode1.vnodeSelector !== vnode2.vnodeSelector) {\n            return false;\n        }\n        if (vnode1.properties && vnode2.properties) {\n            if (vnode1.properties.key !== vnode2.properties.key) {\n                return false;\n            }\n            return vnode1.properties.bind === vnode2.properties.bind;\n        }\n        return !vnode1.properties && !vnode2.properties;\n    };\n    var toTextVNode = function (data) {\n        return {\n            vnodeSelector: '',\n            properties: undefined,\n            children: undefined,\n            text: data.toString(),\n            domNode: null\n        };\n    };\n    var appendChildren = function (parentSelector, insertions, main) {\n        for (var i = 0, length_1 = insertions.length; i < length_1; i++) {\n            var item = insertions[i];\n            if (Array.isArray(item)) {\n                appendChildren(parentSelector, item, main);\n            } else {\n                if (item !== null && item !== undefined) {\n                    if (typeof item === 'string') {\n                        item = toTextVNode(item);\n                    }\n                    main.push(item);\n                }\n            }\n        }\n    };\n    // Render helper functions\n    var missingTransition = function () {\n        throw new Error('Provide a transitions object to the projectionOptions to do animations');\n    };\n    var DEFAULT_PROJECTION_OPTIONS = {\n        namespace: undefined,\n        eventHandlerInterceptor: undefined,\n        styleApplyer: function (domNode, styleName, value) {\n            // Provides a hook to add vendor prefixes for browsers that still need it.\n            domNode.style[styleName] = value;\n        },\n        transitions: {\n            enter: missingTransition,\n            exit: missingTransition\n        }\n    };\n    var applyDefaultProjectionOptions = function (projectorOptions) {\n        return extend(DEFAULT_PROJECTION_OPTIONS, projectorOptions);\n    };\n    var checkStyleValue = function (styleValue) {\n        if (typeof styleValue !== 'string') {\n            throw new Error('Style values must be strings');\n        }\n    };\n    var setProperties = function (domNode, properties, projectionOptions) {\n        if (!properties) {\n            return;\n        }\n        var eventHandlerInterceptor = projectionOptions.eventHandlerInterceptor;\n        var propNames = Object.keys(properties);\n        var propCount = propNames.length;\n        var _loop_1 = function (i) {\n            var propName = propNames[i];\n            /* tslint:disable:no-var-keyword: edge case */\n            var propValue = properties[propName];\n            /* tslint:enable:no-var-keyword */\n            if (propName === 'className') {\n                throw new Error('Property \"className\" is not supported, use \"class\".');\n            } else if (propName === 'class') {\n                propValue.split(/\\s+/).forEach(function (token) {\n                    return domNode.classList.add(token);\n                });\n            } else if (propName === 'classes') {\n                // object with string keys and boolean values\n                var classNames = Object.keys(propValue);\n                var classNameCount = classNames.length;\n                for (var j = 0; j < classNameCount; j++) {\n                    var className = classNames[j];\n                    if (propValue[className]) {\n                        domNode.classList.add(className);\n                    }\n                }\n            } else if (propName === 'styles') {\n                // object with string keys and string (!) values\n                var styleNames = Object.keys(propValue);\n                var styleCount = styleNames.length;\n                for (var j = 0; j < styleCount; j++) {\n                    var styleName = styleNames[j];\n                    var styleValue = propValue[styleName];\n                    if (styleValue) {\n                        checkStyleValue(styleValue);\n                        projectionOptions.styleApplyer(domNode, styleName, styleValue);\n                    }\n                }\n            } else if (propName !== 'key' && propValue !== null && propValue !== undefined) {\n                var type = typeof propValue;\n                if (type === 'function') {\n                    if (propName.lastIndexOf('on', 0) === 0) {\n                        if (eventHandlerInterceptor) {\n                            propValue = eventHandlerInterceptor(propName, propValue, domNode, properties);    // intercept eventhandlers\n                        }\n                        if (propName === 'oninput') {\n                            (function () {\n                                // record the evt.target.value, because IE and Edge sometimes do a requestAnimationFrame between changing value and running oninput\n                                var oldPropValue = propValue;\n                                propValue = function (evt) {\n                                    oldPropValue.apply(this, [evt]);\n                                    evt.target['oninput-value'] = evt.target.value;    // may be HTMLTextAreaElement as well\n                                };\n                            }());\n                        }\n                        domNode[propName] = propValue;\n                    }\n                } else if (type === 'string' && propName !== 'value' && propName !== 'innerHTML') {\n                    if (projectionOptions.namespace === NAMESPACE_SVG && propName === 'href') {\n                        domNode.setAttributeNS(NAMESPACE_XLINK, propName, propValue);\n                    } else {\n                        domNode.setAttribute(propName, propValue);\n                    }\n                } else {\n                    domNode[propName] = propValue;\n                }\n            }\n        };\n        for (var i = 0; i < propCount; i++) {\n            _loop_1(i);\n        }\n    };\n    var updateProperties = function (domNode, previousProperties, properties, projectionOptions) {\n        if (!properties) {\n            return;\n        }\n        var propertiesUpdated = false;\n        var propNames = Object.keys(properties);\n        var propCount = propNames.length;\n        for (var i = 0; i < propCount; i++) {\n            var propName = propNames[i];\n            // assuming that properties will be nullified instead of missing is by design\n            var propValue = properties[propName];\n            var previousValue = previousProperties[propName];\n            if (propName === 'class') {\n                if (previousValue !== propValue) {\n                    throw new Error('\"class\" property may not be updated. Use the \"classes\" property for conditional css classes.');\n                }\n            } else if (propName === 'classes') {\n                var classList = domNode.classList;\n                var classNames = Object.keys(propValue);\n                var classNameCount = classNames.length;\n                for (var j = 0; j < classNameCount; j++) {\n                    var className = classNames[j];\n                    var on = !!propValue[className];\n                    var previousOn = !!previousValue[className];\n                    if (on === previousOn) {\n                        continue;\n                    }\n                    propertiesUpdated = true;\n                    if (on) {\n                        classList.add(className);\n                    } else {\n                        classList.remove(className);\n                    }\n                }\n            } else if (propName === 'styles') {\n                var styleNames = Object.keys(propValue);\n                var styleCount = styleNames.length;\n                for (var j = 0; j < styleCount; j++) {\n                    var styleName = styleNames[j];\n                    var newStyleValue = propValue[styleName];\n                    var oldStyleValue = previousValue[styleName];\n                    if (newStyleValue === oldStyleValue) {\n                        continue;\n                    }\n                    propertiesUpdated = true;\n                    if (newStyleValue) {\n                        checkStyleValue(newStyleValue);\n                        projectionOptions.styleApplyer(domNode, styleName, newStyleValue);\n                    } else {\n                        projectionOptions.styleApplyer(domNode, styleName, '');\n                    }\n                }\n            } else {\n                if (!propValue && typeof previousValue === 'string') {\n                    propValue = '';\n                }\n                if (propName === 'value') {\n                    var domValue = domNode[propName];\n                    if (domValue !== propValue    // The 'value' in the DOM tree !== newValue\n&& (domNode['oninput-value'] ? domValue === domNode['oninput-value']    // If the last reported value to 'oninput' does not match domValue, do nothing and wait for oninput\n : propValue !== previousValue    // Only update the value if the vdom changed\n)) {\n                        domNode[propName] = propValue;\n                        // Reset the value, even if the virtual DOM did not change\n                        domNode['oninput-value'] = undefined;\n                    }\n                    // else do not update the domNode, otherwise the cursor position would be changed\n                    if (propValue !== previousValue) {\n                        propertiesUpdated = true;\n                    }\n                } else if (propValue !== previousValue) {\n                    var type = typeof propValue;\n                    if (type === 'function') {\n                        throw new Error('Functions may not be updated on subsequent renders (property: ' + propName + '). Hint: declare event handler functions outside the render() function.');\n                    }\n                    if (type === 'string' && propName !== 'innerHTML') {\n                        if (projectionOptions.namespace === NAMESPACE_SVG && propName === 'href') {\n                            domNode.setAttributeNS(NAMESPACE_XLINK, propName, propValue);\n                        } else if (propName === 'role' && propValue === '') {\n                            domNode.removeAttribute(propName);\n                        } else {\n                            domNode.setAttribute(propName, propValue);\n                        }\n                    } else {\n                        if (domNode[propName] !== propValue) {\n                            domNode[propName] = propValue;\n                        }\n                    }\n                    propertiesUpdated = true;\n                }\n            }\n        }\n        return propertiesUpdated;\n    };\n    var findIndexOfChild = function (children, sameAs, start) {\n        if (sameAs.vnodeSelector !== '') {\n            // Never scan for text-nodes\n            for (var i = start; i < children.length; i++) {\n                if (same(children[i], sameAs)) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    };\n    var nodeAdded = function (vNode, transitions) {\n        if (vNode.properties) {\n            var enterAnimation = vNode.properties.enterAnimation;\n            if (enterAnimation) {\n                if (typeof enterAnimation === 'function') {\n                    enterAnimation(vNode.domNode, vNode.properties);\n                } else {\n                    transitions.enter(vNode.domNode, vNode.properties, enterAnimation);\n                }\n            }\n        }\n    };\n    var nodeToRemove = function (vNode, transitions) {\n        var domNode = vNode.domNode;\n        if (vNode.properties) {\n            var exitAnimation = vNode.properties.exitAnimation;\n            if (exitAnimation) {\n                domNode.style.pointerEvents = 'none';\n                var removeDomNode = function () {\n                    if (domNode.parentNode) {\n                        domNode.parentNode.removeChild(domNode);\n                    }\n                };\n                if (typeof exitAnimation === 'function') {\n                    exitAnimation(domNode, removeDomNode, vNode.properties);\n                    return;\n                } else {\n                    transitions.exit(vNode.domNode, vNode.properties, exitAnimation, removeDomNode);\n                    return;\n                }\n            }\n        }\n        if (domNode.parentNode) {\n            domNode.parentNode.removeChild(domNode);\n        }\n    };\n    var checkDistinguishable = function (childNodes, indexToCheck, parentVNode, operation) {\n        var childNode = childNodes[indexToCheck];\n        if (childNode.vnodeSelector === '') {\n            return;    // Text nodes need not be distinguishable\n        }\n        var properties = childNode.properties;\n        var key = properties ? properties.key === undefined ? properties.bind : properties.key : undefined;\n        if (!key) {\n            for (var i = 0; i < childNodes.length; i++) {\n                if (i !== indexToCheck) {\n                    var node = childNodes[i];\n                    if (same(node, childNode)) {\n                        if (operation === 'added') {\n                            throw new Error(parentVNode.vnodeSelector + ' had a ' + childNode.vnodeSelector + ' child ' + 'added, but there is now more than one. You must add unique key properties to make them distinguishable.');\n                        } else {\n                            throw new Error(parentVNode.vnodeSelector + ' had a ' + childNode.vnodeSelector + ' child ' + 'removed, but there were more than one. You must add unique key properties to make them distinguishable.');\n                        }\n                    }\n                }\n            }\n        }\n    };\n    var createDom;\n    var updateDom;\n    var updateChildren = function (vnode, domNode, oldChildren, newChildren, projectionOptions) {\n        if (oldChildren === newChildren) {\n            return false;\n        }\n        oldChildren = oldChildren || emptyArray;\n        newChildren = newChildren || emptyArray;\n        var oldChildrenLength = oldChildren.length;\n        var newChildrenLength = newChildren.length;\n        var transitions = projectionOptions.transitions;\n        var oldIndex = 0;\n        var newIndex = 0;\n        var i;\n        var textUpdated = false;\n        while (newIndex < newChildrenLength) {\n            var oldChild = oldIndex < oldChildrenLength ? oldChildren[oldIndex] : undefined;\n            var newChild = newChildren[newIndex];\n            if (oldChild !== undefined && same(oldChild, newChild)) {\n                textUpdated = updateDom(oldChild, newChild, projectionOptions) || textUpdated;\n                oldIndex++;\n            } else {\n                var findOldIndex = findIndexOfChild(oldChildren, newChild, oldIndex + 1);\n                if (findOldIndex >= 0) {\n                    // Remove preceding missing children\n                    for (i = oldIndex; i < findOldIndex; i++) {\n                        nodeToRemove(oldChildren[i], transitions);\n                        checkDistinguishable(oldChildren, i, vnode, 'removed');\n                    }\n                    textUpdated = updateDom(oldChildren[findOldIndex], newChild, projectionOptions) || textUpdated;\n                    oldIndex = findOldIndex + 1;\n                } else {\n                    // New child\n                    createDom(newChild, domNode, oldIndex < oldChildrenLength ? oldChildren[oldIndex].domNode : undefined, projectionOptions);\n                    nodeAdded(newChild, transitions);\n                    checkDistinguishable(newChildren, newIndex, vnode, 'added');\n                }\n            }\n            newIndex++;\n        }\n        if (oldChildrenLength > oldIndex) {\n            // Remove child fragments\n            for (i = oldIndex; i < oldChildrenLength; i++) {\n                nodeToRemove(oldChildren[i], transitions);\n                checkDistinguishable(oldChildren, i, vnode, 'removed');\n            }\n        }\n        return textUpdated;\n    };\n    var addChildren = function (domNode, children, projectionOptions) {\n        if (!children) {\n            return;\n        }\n        for (var i = 0; i < children.length; i++) {\n            createDom(children[i], domNode, undefined, projectionOptions);\n        }\n    };\n    var initPropertiesAndChildren = function (domNode, vnode, projectionOptions) {\n        addChildren(domNode, vnode.children, projectionOptions);\n        // children before properties, needed for value property of <select>.\n        if (vnode.text) {\n            domNode.textContent = vnode.text;\n        }\n        setProperties(domNode, vnode.properties, projectionOptions);\n        if (vnode.properties && vnode.properties.afterCreate) {\n            vnode.properties.afterCreate.apply(vnode.properties.bind || vnode.properties, [\n                domNode,\n                projectionOptions,\n                vnode.vnodeSelector,\n                vnode.properties,\n                vnode.children\n            ]);\n        }\n    };\n    createDom = function (vnode, parentNode, insertBefore, projectionOptions) {\n        var domNode, i, c, start = 0, type, found;\n        var vnodeSelector = vnode.vnodeSelector;\n        var doc = parentNode.ownerDocument;\n        if (vnodeSelector === '') {\n            domNode = vnode.domNode = doc.createTextNode(vnode.text);\n            if (insertBefore !== undefined) {\n                parentNode.insertBefore(domNode, insertBefore);\n            } else {\n                parentNode.appendChild(domNode);\n            }\n        } else {\n            for (i = 0; i <= vnodeSelector.length; ++i) {\n                c = vnodeSelector.charAt(i);\n                if (i === vnodeSelector.length || c === '.' || c === '#') {\n                    type = vnodeSelector.charAt(start - 1);\n                    found = vnodeSelector.slice(start, i);\n                    if (type === '.') {\n                        domNode.classList.add(found);\n                    } else if (type === '#') {\n                        domNode.id = found;\n                    } else {\n                        if (found === 'svg') {\n                            projectionOptions = extend(projectionOptions, { namespace: NAMESPACE_SVG });\n                        }\n                        if (projectionOptions.namespace !== undefined) {\n                            domNode = vnode.domNode = doc.createElementNS(projectionOptions.namespace, found);\n                        } else {\n                            domNode = vnode.domNode = vnode.domNode || doc.createElement(found);\n                            if (found === 'input' && vnode.properties && vnode.properties.type !== undefined) {\n                                // IE8 and older don't support setting input type after the DOM Node has been added to the document\n                                domNode.setAttribute('type', vnode.properties.type);\n                            }\n                        }\n                        if (insertBefore !== undefined) {\n                            parentNode.insertBefore(domNode, insertBefore);\n                        } else if (domNode.parentNode !== parentNode) {\n                            parentNode.appendChild(domNode);\n                        }\n                    }\n                    start = i + 1;\n                }\n            }\n            initPropertiesAndChildren(domNode, vnode, projectionOptions);\n        }\n    };\n    updateDom = function (previous, vnode, projectionOptions) {\n        var domNode = previous.domNode;\n        var textUpdated = false;\n        if (previous === vnode) {\n            return false;    // By contract, VNode objects may not be modified anymore after passing them to maquette\n        }\n        var updated = false;\n        if (vnode.vnodeSelector === '') {\n            if (vnode.text !== previous.text) {\n                var newVNode = domNode.ownerDocument.createTextNode(vnode.text);\n                domNode.parentNode.replaceChild(newVNode, domNode);\n                vnode.domNode = newVNode;\n                textUpdated = true;\n                return textUpdated;\n            }\n        } else {\n            if (vnode.vnodeSelector.lastIndexOf('svg', 0) === 0) {\n                projectionOptions = extend(projectionOptions, { namespace: NAMESPACE_SVG });\n            }\n            if (previous.text !== vnode.text) {\n                updated = true;\n                if (vnode.text === undefined) {\n                    domNode.removeChild(domNode.firstChild);    // the only textnode presumably\n                } else {\n                    domNode.textContent = vnode.text;\n                }\n            }\n            updated = updateChildren(vnode, domNode, previous.children, vnode.children, projectionOptions) || updated;\n            updated = updateProperties(domNode, previous.properties, vnode.properties, projectionOptions) || updated;\n            if (vnode.properties && vnode.properties.afterUpdate) {\n                vnode.properties.afterUpdate.apply(vnode.properties.bind || vnode.properties, [\n                    domNode,\n                    projectionOptions,\n                    vnode.vnodeSelector,\n                    vnode.properties,\n                    vnode.children\n                ]);\n            }\n        }\n        if (updated && vnode.properties && vnode.properties.updateAnimation) {\n            vnode.properties.updateAnimation(domNode, vnode.properties, previous.properties);\n        }\n        vnode.domNode = previous.domNode;\n        return textUpdated;\n    };\n    var createProjection = function (vnode, projectionOptions) {\n        return {\n            update: function (updatedVnode) {\n                if (vnode.vnodeSelector !== updatedVnode.vnodeSelector) {\n                    throw new Error('The selector for the root VNode may not be changed. (consider using dom.merge and add one extra level to the virtual DOM)');\n                }\n                updateDom(vnode, updatedVnode, projectionOptions);\n                vnode = updatedVnode;\n            },\n            domNode: vnode.domNode\n        };\n    };\n    /**\n * The `h` function is used to create a virtual DOM node.\n * This function is largely inspired by the mercuryjs and mithril frameworks.\n * The `h` stands for (virtual) hyperscript.\n *\n * All possible method signatures of this function can be found in the [[H]] 'interface'.\n *\n * NOTE: There are {@link http://maquettejs.org/docs/rules.html|three basic rules} you should be aware of when updating the virtual DOM.\n */\n    exports.h = function (selector, properties, children) {\n        if (Array.isArray(properties)) {\n            children = properties;\n            properties = undefined;\n        }\n        var text;\n        var flattenedChildren;\n        // Recognize a common special case where there is only a single text node\n        if (children !== undefined && children.length === 1 && typeof children[0] === 'string') {\n            text = children[0];\n        } else if (children) {\n            flattenedChildren = [];\n            appendChildren(selector, children, flattenedChildren);\n            if (flattenedChildren.length === 0) {\n                flattenedChildren = undefined;\n            }\n        }\n        return {\n            vnodeSelector: selector,\n            properties: properties,\n            children: flattenedChildren,\n            text: text === '' ? undefined : text,\n            domNode: null\n        };\n    };\n    /**\n * Contains simple low-level utility functions to manipulate the real DOM.\n */\n    exports.dom = {\n        /**\n     * Creates a real DOM tree from `vnode`. The [[Projection]] object returned will contain the resulting DOM Node in\n     * its [[Projection.domNode|domNode]] property.\n     * This is a low-level method. Users will typically use a [[Projector]] instead.\n     * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]]\n     * objects may only be rendered once.\n     * @param projectionOptions - Options to be used to create and update the projection.\n     * @returns The [[Projection]] which also contains the DOM Node that was created.\n     */\n        create: function (vnode, projectionOptions) {\n            projectionOptions = applyDefaultProjectionOptions(projectionOptions);\n            createDom(vnode, document.createElement('div'), undefined, projectionOptions);\n            return createProjection(vnode, projectionOptions);\n        },\n        /**\n     * Appends a new child node to the DOM which is generated from a [[VNode]].\n     * This is a low-level method. Users will typically use a [[Projector]] instead.\n     * @param parentNode - The parent node for the new child node.\n     * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]]\n     * objects may only be rendered once.\n     * @param projectionOptions - Options to be used to create and update the [[Projection]].\n     * @returns The [[Projection]] that was created.\n     */\n        append: function (parentNode, vnode, projectionOptions) {\n            projectionOptions = applyDefaultProjectionOptions(projectionOptions);\n            createDom(vnode, parentNode, undefined, projectionOptions);\n            return createProjection(vnode, projectionOptions);\n        },\n        /**\n     * Inserts a new DOM node which is generated from a [[VNode]].\n     * This is a low-level method. Users wil typically use a [[Projector]] instead.\n     * @param beforeNode - The node that the DOM Node is inserted before.\n     * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function.\n     * NOTE: [[VNode]] objects may only be rendered once.\n     * @param projectionOptions - Options to be used to create and update the projection, see [[createProjector]].\n     * @returns The [[Projection]] that was created.\n     */\n        insertBefore: function (beforeNode, vnode, projectionOptions) {\n            projectionOptions = applyDefaultProjectionOptions(projectionOptions);\n            createDom(vnode, beforeNode.parentNode, beforeNode, projectionOptions);\n            return createProjection(vnode, projectionOptions);\n        },\n        /**\n     * Merges a new DOM node which is generated from a [[VNode]] with an existing DOM Node.\n     * This means that the virtual DOM and the real DOM will have one overlapping element.\n     * Therefore the selector for the root [[VNode]] will be ignored, but its properties and children will be applied to the Element provided.\n     * This is a low-level method. Users wil typically use a [[Projector]] instead.\n     * @param element - The existing element to adopt as the root of the new virtual DOM. Existing attributes and child nodes are preserved.\n     * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]] objects\n     * may only be rendered once.\n     * @param projectionOptions - Options to be used to create and update the projection, see [[createProjector]].\n     * @returns The [[Projection]] that was created.\n     */\n        merge: function (element, vnode, projectionOptions) {\n            projectionOptions = applyDefaultProjectionOptions(projectionOptions);\n            vnode.domNode = element;\n            initPropertiesAndChildren(element, vnode, projectionOptions);\n            return createProjection(vnode, projectionOptions);\n        },\n        /**\n     * Replaces an existing DOM node with a node generated from a [[VNode]].\n     * This is a low-level method. Users will typically use a [[Projector]] instead.\n     * @param element - The node for the [[VNode]] to replace.\n     * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]]\n     * objects may only be rendered once.\n     * @param projectionOptions - Options to be used to create and update the [[Projection]].\n     * @returns The [[Projection]] that was created.\n     */\n        replace: function (element, vnode, projectionOptions) {\n            projectionOptions = applyDefaultProjectionOptions(projectionOptions);\n            createDom(vnode, element.parentNode, element, projectionOptions);\n            element.parentNode.removeChild(element);\n            return createProjection(vnode, projectionOptions);\n        }\n    };\n    /**\n * Creates a [[CalculationCache]] object, useful for caching [[VNode]] trees.\n * In practice, caching of [[VNode]] trees is not needed, because achieving 60 frames per second is almost never a problem.\n * For more information, see [[CalculationCache]].\n *\n * @param <Result> The type of the value that is cached.\n */\n    exports.createCache = function () {\n        var cachedInputs;\n        var cachedOutcome;\n        return {\n            invalidate: function () {\n                cachedOutcome = undefined;\n                cachedInputs = undefined;\n            },\n            result: function (inputs, calculation) {\n                if (cachedInputs) {\n                    for (var i = 0; i < inputs.length; i++) {\n                        if (cachedInputs[i] !== inputs[i]) {\n                            cachedOutcome = undefined;\n                        }\n                    }\n                }\n                if (!cachedOutcome) {\n                    cachedOutcome = calculation();\n                    cachedInputs = inputs;\n                }\n                return cachedOutcome;\n            }\n        };\n    };\n    /**\n * Creates a {@link Mapping} instance that keeps an array of result objects synchronized with an array of source objects.\n * See {@link http://maquettejs.org/docs/arrays.html|Working with arrays}.\n *\n * @param <Source>       The type of source items. A database-record for instance.\n * @param <Target>       The type of target items. A [[Component]] for instance.\n * @param getSourceKey   `function(source)` that must return a key to identify each source object. The result must either be a string or a number.\n * @param createResult   `function(source, index)` that must create a new result object from a given source. This function is identical\n *                       to the `callback` argument in `Array.map(callback)`.\n * @param updateResult   `function(source, target, index)` that updates a result to an updated source.\n */\n    exports.createMapping = function (getSourceKey, createResult, updateResult) {\n        var keys = [];\n        var results = [];\n        return {\n            results: results,\n            map: function (newSources) {\n                var newKeys = newSources.map(getSourceKey);\n                var oldTargets = results.slice();\n                var oldIndex = 0;\n                for (var i = 0; i < newSources.length; i++) {\n                    var source = newSources[i];\n                    var sourceKey = newKeys[i];\n                    if (sourceKey === keys[oldIndex]) {\n                        results[i] = oldTargets[oldIndex];\n                        updateResult(source, oldTargets[oldIndex], i);\n                        oldIndex++;\n                    } else {\n                        var found = false;\n                        for (var j = 1; j < keys.length + 1; j++) {\n                            var searchIndex = (oldIndex + j) % keys.length;\n                            if (keys[searchIndex] === sourceKey) {\n                                results[i] = oldTargets[searchIndex];\n                                updateResult(newSources[i], oldTargets[searchIndex], i);\n                                oldIndex = searchIndex + 1;\n                                found = true;\n                                break;\n                            }\n                        }\n                        if (!found) {\n                            results[i] = createResult(source, i);\n                        }\n                    }\n                }\n                results.length = newSources.length;\n                keys = newKeys;\n            }\n        };\n    };\n    /**\n * Creates a [[Projector]] instance using the provided projectionOptions.\n *\n * For more information, see [[Projector]].\n *\n * @param projectorOptions   Options that influence how the DOM is rendered and updated.\n */\n    exports.createProjector = function (projectorOptions) {\n        var projector;\n        var projectionOptions = applyDefaultProjectionOptions(projectorOptions);\n        projectionOptions.eventHandlerInterceptor = function (propertyName, eventHandler, domNode, properties) {\n            return function () {\n                // intercept function calls (event handlers) to do a render afterwards.\n                projector.scheduleRender();\n                return eventHandler.apply(properties.bind || this, arguments);\n            };\n        };\n        var renderCompleted = true;\n        var scheduled;\n        var stopped = false;\n        var projections = [];\n        var renderFunctions = [];\n        // matches the projections array\n        var doRender = function () {\n            scheduled = undefined;\n            if (!renderCompleted) {\n                return;    // The last render threw an error, it should be logged in the browser console.\n            }\n            renderCompleted = false;\n            for (var i = 0; i < projections.length; i++) {\n                var updatedVnode = renderFunctions[i]();\n                projections[i].update(updatedVnode);\n            }\n            renderCompleted = true;\n        };\n        projector = {\n            renderNow: doRender,\n            scheduleRender: function () {\n                if (!scheduled && !stopped) {\n                    scheduled = requestAnimationFrame(doRender);\n                }\n            },\n            stop: function () {\n                if (scheduled) {\n                    cancelAnimationFrame(scheduled);\n                    scheduled = undefined;\n                }\n                stopped = true;\n            },\n            resume: function () {\n                stopped = false;\n                renderCompleted = true;\n                projector.scheduleRender();\n            },\n            append: function (parentNode, renderMaquetteFunction) {\n                projections.push(exports.dom.append(parentNode, renderMaquetteFunction(), projectionOptions));\n                renderFunctions.push(renderMaquetteFunction);\n            },\n            insertBefore: function (beforeNode, renderMaquetteFunction) {\n                projections.push(exports.dom.insertBefore(beforeNode, renderMaquetteFunction(), projectionOptions));\n                renderFunctions.push(renderMaquetteFunction);\n            },\n            merge: function (domNode, renderMaquetteFunction) {\n                projections.push(exports.dom.merge(domNode, renderMaquetteFunction(), projectionOptions));\n                renderFunctions.push(renderMaquetteFunction);\n            },\n            replace: function (domNode, renderMaquetteFunction) {\n                projections.push(exports.dom.replace(domNode, renderMaquetteFunction(), projectionOptions));\n                renderFunctions.push(renderMaquetteFunction);\n            },\n            detach: function (renderMaquetteFunction) {\n                for (var i = 0; i < renderFunctions.length; i++) {\n                    if (renderFunctions[i] === renderMaquetteFunction) {\n                        renderFunctions.splice(i, 1);\n                        return projections.splice(i, 1)[0];\n                    }\n                }\n                throw new Error('renderMaquetteFunction was not found');\n            }\n        };\n        return projector;\n    };\n}));",null]}